#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

// Wifi network station credentials
#define WIFI_SSID "Nome da Rede"
#define WIFI_PASSWORD "Sua senha"
// Telegram BOT Token (Get from Botfather)
#define BOT_TOKEN "66666666666666:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
#define CHAT_ID "1234567891011"

const unsigned long BOT_MTBS = 1000;  // mean time between scan messages

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;  // last time messages' scan has been done

int sensorSinal = 33;
int botao = 26;
int rele = 27;
int ledWifi = 32;
int buzzer = 25;
int nivelAgua = 0;

/* leitura do sensor */
int readSensor() {
  nivelAgua = analogRead(sensorSinal); /* Realiza a leitura analógica do sinal do sensor */
  return nivelAgua;                    /* envia leitura */
}

void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID) {
      bot.sendMessage(chat_id, "Unauthorized user", "");
    } else {
      String text = bot.messages[i].text;
      Serial.println(text);
      String from_name = bot.messages[i].from_name;

      if (text == "/start") {
        String welcome = "Olá, " + from_name + "!\n";
        welcome += "Seja bem-vindo ao Coffee Bot! Escolha o que fazer: \n\n";
        welcome += "/coffee_on para ligar a cafeteira \n";
        welcome += "/coffee_off para desligar a cafeteira \n";
        welcome += "/water para saber se há água no reservatório \n";
        welcome += "/tampa para saber se a tampa está aberta/fechada \n";
        bot.sendMessage(chat_id, welcome, "");
      }
      if (text == "/coffee_on") {
        if (nivelAgua >= 4090 && digitalRead(botao) == true) {
          digitalWrite(rele, HIGH);
          digitalWrite(buzzer, HIGH);
          delay(1500);
          digitalWrite(buzzer, LOW);
          bot.sendMessage(chat_id, "A cafeteira foi ligada! \n", "");
          bot.sendMessage(chat_id, "Seu café ficará pronto em instantes.", "");
        } else if (nivelAgua < 4090) {
          bot.sendMessage(chat_id, "Reservatório sem água! \n", "");
          bot.sendMessage(chat_id, "Abasteça a cafeteira para ligá-la.", "");
        }
           else if (digitalRead(botao) == false) {
            bot.sendMessage(chat_id, "Feche a tampa da cafeteira para ligá-la!", "");
        }
      }
      if (text == "/coffee_off") {
        digitalWrite(rele, LOW);
        bot.sendMessage(chat_id, "A cafeteira foi desligada!", "");
      }
      if (text == "/water") {
        if (nivelAgua >= 4090) {
          bot.sendMessage(chat_id, "Tem água no reservatório!", "");
        } else if (nivelAgua < 4090) {
          bot.sendMessage(chat_id, "Não tem água!", "");
        }
      }
      if (text == "/tampa") {
        if (digitalRead(botao) == false) {
          bot.sendMessage(chat_id, "A tampa está aberta!", "");
        } else {
          bot.sendMessage(chat_id, "A tampa está fechada!", "");
        }
      }
    }
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println();

  pinMode(sensorSinal, INPUT);
  pinMode(botao, INPUT);
  pinMode(rele, OUTPUT);
  pinMode(ledWifi, OUTPUT);
  digitalWrite(ledWifi, LOW);
  pinMode(buzzer, OUTPUT);


  // attempt to connect to Wifi network:
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);  // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  digitalWrite(ledWifi, HIGH);
  digitalWrite(buzzer, HIGH);
  delay(200);
  digitalWrite(buzzer, LOW);
  delay(200);
  digitalWrite(buzzer, HIGH);
  delay(200);
  digitalWrite(buzzer, LOW);
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {

  nivelAgua = 0;
  readSensor();
  Serial.println(nivelAgua);

  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}
